import 'dart:async';
import 'dart:convert';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:syncfusion_flutter_charts/charts.dart';
import 'package:syncfusion_flutter_charts/sparkcharts.dart';

class ChartData {
  final String x;
  final double y1;
  final double y2;

  ChartData(this.x, this.y1, this.y2);
}

class Autogenerated {
  Future<Autogenerated> fetchAutogenerated() async {
    final response = await http.get(Uri.parse(
        'https://aio.tradeone.co.il:29006/v2/json2/market/table/simple?population=PKEY_FND&fields=HebName,FUNDSSuperClass,FundBondPortfolioDurDomGovShikli,FundBondPortfolioDurationTotal'));

    if (response.statusCode == 200) {
      Autogenerated autogenerated =
          Autogenerated.fromJson(jsonDecode(response.body));

      return Autogenerated.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Failed to load album');
    }
  }

  Table? table;

  Autogenerated({this.table});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    table = json['Table'] != null ? new Table.fromJson(json['Table']) : null;
  }
}

class Table {
  String? asOfDate;
  List<Security>? security;

  Table({this.asOfDate, this.security});

  Table.fromJson(Map<String, dynamic> json) {
    asOfDate = json['-AsOfDate'];
    if (json['Security'] != null) {
      security = <Security>[];
      json['Security'].forEach((v) {
        security!.add(new Security.fromJson(v));
      });
    }
  }
}

class Security {
  String? key;
  String? hebName;
  String? fUNDSSuperClass;
  double? fundBondPortfolioDurDomGovShikli;
  double? fundBondPortfolioDurationTotal;

  Security(
      {this.key,
      this.hebName,
      this.fUNDSSuperClass,
      this.fundBondPortfolioDurDomGovShikli,
      this.fundBondPortfolioDurationTotal});

  Security.fromJson(Map<String, dynamic> json) {
    key = json['-Key'];
    hebName = json['HebName'];
    fUNDSSuperClass = json['FUNDSSuperClass'];
    fundBondPortfolioDurDomGovShikli = json['FundBondPortfolioDurDomGovShikli'];
    fundBondPortfolioDurationTotal = json['FundBondPortfolioDurationTotal'];
  }
}

void main() => runApp(const MyApp());

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late Future<Autogenerated> futureAlbum;
  List<Security> Securityies = [];
  List<ChartData> SecurityiesData = [];

  @override
  void initState() {
    super.initState();
    futureAlbum = Autogenerated().fetchAutogenerated();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fetch Data Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Fetch Data Example'),
        ),
        body: Center(
          child: FutureBuilder<Autogenerated>(
            future: futureAlbum,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                Securityies = snapshot.data!.table!.security!;
                _calculate(Securityies);

                return Container(
                    padding: const EdgeInsets.all(90),
                    child: SfCartesianChart(
                        indicators: <TechnicalIndicators<dynamic, dynamic>>[
                          MomentumIndicator<dynamic, dynamic>(
                              seriesName: 'HiloOpenClose',
                              legendIconType: LegendIconType.diamond,
                              legendItemText: 'Indicator')
                        ],
                        tooltipBehavior: TooltipBehavior(),
                        primaryXAxis: CategoryAxis(),
                        primaryYAxis: NumericAxis(
                            decimalPlaces: 1,
                            rangePadding: ChartRangePadding.none),
                        series: <CartesianSeries>[
                          ColumnSeries<ChartData, String>(
                            dataSource: SecurityiesData,
                            xValueMapper: (ChartData data, _) => data.x,
                            yValueMapper: (ChartData data, _) => data.y1,
                            dataLabelSettings: const DataLabelSettings(
                                // labelAlignment: ChartDataLabelAlignment.middle,
                                isVisible: true),
                          ),
                          ColumnSeries<ChartData, String>(
                            dataSource: SecurityiesData,
                            xValueMapper: (ChartData data, _) => data.x,
                            yValueMapper: (ChartData data, _) => data.y2,
                            dataLabelSettings: const DataLabelSettings(
                                // labelAlignment: ChartDataLabelAlignment.middle,
                                isVisible: true),
                          ),
                        ]));
              } else if (snapshot.hasError) {
                return Text('${snapshot.error}');
              }

              // By default, show a loading spinner.
              return const CircularProgressIndicator();
            },
          ),
        ),
      ),
    );
  }

  void _calculate(List<Security> securityies) {
    // .where((e) => e.fUNDSSuperClass==135).toList()
    List<Security> sec = securityies;
    double maxA = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double minA = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double avgA = 0;
    double asA = 0;

    double maxB = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double minB = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double avgB = 0;
    double asB = 0;

    double maxC = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double minC = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double avgC = 0;

    double maxD = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double minD = sec[0].fundBondPortfolioDurationTotal ?? 0;
    double avgD = 0;

    double maxE = sec[0].fundBondPortfolioDurDomGovShikli ?? 0;
    double minE = sec[0].fundBondPortfolioDurDomGovShikli ?? 0;
    double avgE = 0;

    sec.forEach((element) {
      maxA = max(maxA, element.fundBondPortfolioDurationTotal ?? maxA);
      minA = min(minA, element.fundBondPortfolioDurationTotal ?? minA);
      avgA += element.fundBondPortfolioDurationTotal ?? 0;
      maxB = max(maxA, element.fundBondPortfolioDurDomGovShikli ?? maxA);
      minB = min(minA, element.fundBondPortfolioDurDomGovShikli ?? minA);
      avgB += element.fundBondPortfolioDurDomGovShikli ?? 0;
      if (element.key == "5114236") {
        asA = element.fundBondPortfolioDurationTotal ?? asA;
        asB = element.fundBondPortfolioDurDomGovShikli ?? asB;
      }
    });
    avgA /= sec.length!;
    avgB /= sec.length!;
    SecurityiesData.add(ChartData("Min", minA, minB));
    SecurityiesData.add(ChartData("Max", maxA, maxB));
    SecurityiesData.add(ChartData("Avg", avgA, avgB));
    SecurityiesData.add(ChartData("As", asA, asB));
  }
}
